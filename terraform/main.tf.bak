# Variables
variable "aws_region" {
  default = "us-west-2"
}

variable "instance_type" {
  default = "t3.micro"
}

variable "ami_id" {
  default = "ami-0991721486ed52a2c"  # Ubuntu AMI ID
}

variable "key_name" {
  default = "my-key-pair"  # Updated SSH key name
}

# Provider Configuration
provider "aws" {
  region = var.aws_region
  access_key = "[access key]"
  secret_key = "[secret key]"
}

# Create IAM Role for EC2
resource "aws_iam_role" "ec2_role" {
  name               = "yhsllm-ssm-role"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action    = "sts:AssumeRole"
        Principal = {
          Service = "ec2.amazonaws.com"
        }
        Effect    = "Allow"
        Sid       = ""
      },
    ]
  })
}

# Attach Policies to the IAM Role
resource "aws_iam_role_policy_attachment" "ec2_policy_attachment" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEC2FullAccess"
  role       = aws_iam_role.ec2_role.name
}

resource "aws_iam_role_policy_attachment" "ssm_policy_attachment" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonSSMFullAccess"
  role       = aws_iam_role.ec2_role.name
}

resource "aws_iam_role_policy_attachment" "rds_policy_attachment" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonRDSFullAccess"
  role       = aws_iam_role.ec2_role.name
}

# Create IAM Instance Profile
resource "aws_iam_instance_profile" "ec2_instance_profile" {
  name = "yhsllm-ssm-instance-profile"
  role = aws_iam_role.ec2_role.name
}

# Create VPC
resource "aws_vpc" "main" {
  cidr_block = "10.0.0.0/16"
}

# Create Public Subnet for Load Balancer in AZ1 (with Internet Access)
resource "aws_subnet" "app_subnet_public_az1" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.1.0/24"
  availability_zone       = "us-west-2a"
  map_public_ip_on_launch = true
}

# Create Public Subnet for Load Balancer in AZ2 (with Internet Access)
resource "aws_subnet" "app_subnet_public_az2" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.4.0/24"
  availability_zone       = "us-west-2b"
  map_public_ip_on_launch = true
}

# Create Private Subnet for App Server in AZ1
resource "aws_subnet" "app_subnet_private_az1" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.2.0/24"
  availability_zone       = "us-west-2a"
  map_public_ip_on_launch = false
}

# Create Private Subnet for App Server in AZ2
resource "aws_subnet" "app_subnet_private_az2" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.3.0/24"
  availability_zone       = "us-west-2b"
  map_public_ip_on_launch = false
}

# Create DB Subnet for RDS in AZ1
resource "aws_subnet" "db_subnet_private_az1" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.5.0/24"
  availability_zone       = "us-west-2a"
  map_public_ip_on_launch = false
}

# Create DB Subnet for RDS in AZ2
resource "aws_subnet" "db_subnet_private_az2" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.6.0/24"
  availability_zone       = "us-west-2b"
  map_public_ip_on_launch = false
}

# Create DB Subnet Group for RDS (2 AZs for RDS)
resource "aws_db_subnet_group" "db_subnet_group" {
  name       = "yhsllm-db-subnet-group"
  subnet_ids = [
    aws_subnet.db_subnet_private_az1.id,
    aws_subnet.db_subnet_private_az2.id
  ]

  tags = {
    Name = "yhsllm-db-subnet-group"
  }
}

# Create Internet Gateway for VPC
resource "aws_internet_gateway" "internet_gateway" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "yhsllm-internet-gateway"
  }
}

# Create Elastic IP for NAT Gateway
resource "aws_eip" "nat_eip" {
  vpc = true
}

# Create NAT Gateway in Public Subnet AZ1
resource "aws_nat_gateway" "nat_gateway" {
  allocation_id = aws_eip.nat_eip.id
  subnet_id     = aws_subnet.app_subnet_public_az1.id

  tags = {
    Name = "yhsllm-nat-gateway"
  }
}

# Create Route Table for Public Subnet
resource "aws_route_table" "public_route_table" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.internet_gateway.id
  }
}

# Associate Public Route Table with Public Subnet AZ1
resource "aws_route_table_association" "public_route_table_association_az1" {
  subnet_id      = aws_subnet.app_subnet_public_az1.id
  route_table_id = aws_route_table.public_route_table.id
}

# Associate Public Route Table with Public Subnet AZ2
resource "aws_route_table_association" "public_route_table_association_az2" {
  subnet_id      = aws_subnet.app_subnet_public_az2.id
  route_table_id = aws_route_table.public_route_table.id
}

# Create Route Table for Private Subnets
resource "aws_route_table" "private_route_table" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.nat_gateway.id
  }
}

# Associate Private Route Table with App Subnet AZ1
resource "aws_route_table_association" "private_app_route_table_association_az1" {
  subnet_id      = aws_subnet.app_subnet_private_az1.id
  route_table_id = aws_route_table.private_route_table.id
}

# Associate Private Route Table with App Subnet AZ2
resource "aws_route_table_association" "private_app_route_table_association_az2" {
  subnet_id      = aws_subnet.app_subnet_private_az2.id
  route_table_id = aws_route_table.private_route_table.id
}

# Associate Private Route Table with DB Subnet AZ1
resource "aws_route_table_association" "private_db_route_table_association_az1" {
  subnet_id      = aws_subnet.db_subnet_private_az1.id
  route_table_id = aws_route_table.private_route_table.id
}

# Associate Private Route Table with DB Subnet AZ2
resource "aws_route_table_association" "private_db_route_table_association_az2" {
  subnet_id      = aws_subnet.db_subnet_private_az2.id
  route_table_id = aws_route_table.private_route_table.id
}

# Create Security Group for EC2 instance (App Server)
resource "aws_security_group" "ec2_sg" {
  name        = "yhsllm-ec2-sg"
  description = "Allow inbound HTTP traffic"
  vpc_id      = aws_vpc.main.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # ALB will route HTTP traffic to the app server
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # Allow SSH for management (could be restricted)
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Create Security Group for DB instance (Private, no public access)
resource "aws_security_group" "db_sg" {
  name        = "yhsllm-db-sg"
  description = "DB server security group"
  vpc_id      = aws_vpc.main.id

  ingress {
    from_port   = 3306
    to_port     = 3306
    protocol    = "tcp"
    cidr_blocks = [aws_subnet.app_subnet_private_az1.cidr_block, aws_subnet.app_subnet_private_az2.cidr_block]  # Only app server can access DB
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Create Application Load Balancer (ALB) in 2 AZs
resource "aws_lb" "app_lb" {
  name               = "yhsllm-app-lb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.ec2_sg.id]
  subnets            = [
    aws_subnet.app_subnet_public_az1.id,
    aws_subnet.app_subnet_public_az2.id
  ]
  enable_deletion_protection = false
}

# Create Target Group for Load Balancer
resource "aws_lb_target_group" "app_target_group" {
  name     = "yhsllm-app-target-group"
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.main.id
}

# Create EC2 Instance (App Server) in Private Subnet
resource "aws_instance" "app_server" {
  ami                         = var.ami_id
  instance_type               = var.instance_type
  key_name                    = var.key_name
  subnet_id                   = aws_subnet.app_subnet_private_az1.id  # Private subnet for the app server (AZ1)
  associate_public_ip_address = false
  iam_instance_profile        = aws_iam_instance_profile.ec2_instance_profile.name
  vpc_security_group_ids      = [aws_security_group.ec2_sg.id]

  tags = {
    Name = "yhsllm-app-server"
  }

  # User data to install docker, pull the app from GitHub, and run it
  user_data = <<-EOF
              #!/bin/bash
              apt-get update -y
              apt-get install -y docker.io git docker-compose
              mkdir -p /home/ubuntu/llm
              cd /home/ubuntu/llm
              git clone https://github.com/yhsesq/llm.git .
              docker-compose down
              docker-compose up -d
            EOF
}

# Create RDS Instance (MySQL DB) in Private Subnet
resource "aws_db_instance" "chatwtf_db" {
  allocated_storage    = 20
  storage_type         = "gp2"
  engine               = "mysql"
  engine_version       = "8.0"
  instance_class       = "db.t3.micro"
  db_name              = "chatwtf"
  username             = "user123"
  password             = "password123"
  db_subnet_group_name = aws_db_subnet_group.db_subnet_group.name
  vpc_security_group_ids = [aws_security_group.db_sg.id]  # DB server security group
  multi_az             = true  # Enable multi-AZ for high availability
  publicly_accessible  = false  # No public access to DB
  skip_final_snapshot  = true  # Skip final snapshot when deleting RDS instance
  tags = {
    Name = "yhsllm-db-instance"
  }
}

# Output EC2 Instance Private IP
output "app_server_private_ip" {
  value = aws_instance.app_server.private_ip
}

# Output RDS Endpoint
output "db_endpoint" {
  value = aws_db_instance.chatwtf_db.endpoint
}
